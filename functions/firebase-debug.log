[debug] [2025-07-02T04:40:32.025Z] ----------------------------------------------------------------------
[debug] [2025-07-02T04:40:32.026Z] Command:       /opt/homebrew/Cellar/node/23.11.0/bin/node /opt/homebrew/bin/firebase deploy --only functions,dataconnect,firestore:rules,storage
[debug] [2025-07-02T04:40:32.027Z] CLI Version:   14.9.0
[debug] [2025-07-02T04:40:32.027Z] Platform:      darwin
[debug] [2025-07-02T04:40:32.027Z] Node Version:  v23.11.0
[debug] [2025-07-02T04:40:32.027Z] Time:          Wed Jul 02 2025 07:40:32 GMT+0300 (Israel Daylight Time)
[debug] [2025-07-02T04:40:32.027Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-02T04:40:32.090Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-07-02T04:40:32.091Z] > authorizing via signed-in user (itamar92@gmail.com)
[debug] [2025-07-02T04:40:32.091Z] [iam] checking project music-sync-99dbb for permissions ["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","cloudsql.databases.create","cloudsql.databases.update","cloudsql.instances.connect","cloudsql.instances.create","cloudsql.instances.get","cloudsql.instances.list","cloudsql.instances.update","cloudsql.users.create","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasedataconnect.connectors.create","firebasedataconnect.connectors.delete","firebasedataconnect.connectors.list","firebasedataconnect.connectors.update","firebasedataconnect.operations.get","firebasedataconnect.schemas.create","firebasedataconnect.schemas.delete","firebasedataconnect.schemas.list","firebasedataconnect.schemas.update","firebasedataconnect.services.create","firebasedataconnect.services.delete","firebasedataconnect.services.list","firebasedataconnect.services.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create"]
[debug] [2025-07-02T04:40:32.091Z] Checked if tokens are valid: false, expires at: 1751417969381
[debug] [2025-07-02T04:40:32.091Z] Checked if tokens are valid: false, expires at: 1751417969381
[debug] [2025-07-02T04:40:32.091Z] > refreshing access token with scopes: []
[debug] [2025-07-02T04:40:32.092Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2025-07-02T04:40:32.092Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-07-02T04:40:32.265Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2025-07-02T04:40:32.266Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-07-02T04:40:32.278Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions [none]
[debug] [2025-07-02T04:40:32.278Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions x-goog-quota-user=projects/music-sync-99dbb
[debug] [2025-07-02T04:40:32.278Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","cloudsql.databases.create","cloudsql.databases.update","cloudsql.instances.connect","cloudsql.instances.create","cloudsql.instances.get","cloudsql.instances.list","cloudsql.instances.update","cloudsql.users.create","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasedataconnect.connectors.create","firebasedataconnect.connectors.delete","firebasedataconnect.connectors.list","firebasedataconnect.connectors.update","firebasedataconnect.operations.get","firebasedataconnect.schemas.create","firebasedataconnect.schemas.delete","firebasedataconnect.schemas.list","firebasedataconnect.schemas.update","firebasedataconnect.services.create","firebasedataconnect.services.delete","firebasedataconnect.services.list","firebasedataconnect.services.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create"]}
[debug] [2025-07-02T04:40:33.227Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions 200
[debug] [2025-07-02T04:40:33.227Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","cloudsql.databases.create","cloudsql.databases.update","cloudsql.instances.connect","cloudsql.instances.create","cloudsql.instances.get","cloudsql.instances.list","cloudsql.instances.update","cloudsql.users.create","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasedataconnect.connectors.create","firebasedataconnect.connectors.delete","firebasedataconnect.connectors.list","firebasedataconnect.connectors.update","firebasedataconnect.operations.get","firebasedataconnect.schemas.create","firebasedataconnect.schemas.delete","firebasedataconnect.schemas.list","firebasedataconnect.schemas.update","firebasedataconnect.services.create","firebasedataconnect.services.delete","firebasedataconnect.services.list","firebasedataconnect.services.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create"]}
[debug] [2025-07-02T04:40:33.227Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:33.227Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:33.228Z] >>> [apiv2][query] POST https://iam.googleapis.com/v1/projects/music-sync-99dbb/serviceAccounts/music-sync-99dbb@appspot.gserviceaccount.com:testIamPermissions [none]
[debug] [2025-07-02T04:40:33.228Z] >>> [apiv2][body] POST https://iam.googleapis.com/v1/projects/music-sync-99dbb/serviceAccounts/music-sync-99dbb@appspot.gserviceaccount.com:testIamPermissions {"permissions":["iam.serviceAccounts.actAs"]}
[debug] [2025-07-02T04:40:34.266Z] <<< [apiv2][status] POST https://iam.googleapis.com/v1/projects/music-sync-99dbb/serviceAccounts/music-sync-99dbb@appspot.gserviceaccount.com:testIamPermissions 200
[debug] [2025-07-02T04:40:34.266Z] <<< [apiv2][body] POST https://iam.googleapis.com/v1/projects/music-sync-99dbb/serviceAccounts/music-sync-99dbb@appspot.gserviceaccount.com:testIamPermissions {"permissions":["iam.serviceAccounts.actAs"]}
[info] 
[info] === Deploying to 'music-sync-99dbb'...
[info] 
[info] i  deploying storage, firestore, functions, dataconnect 
[info] Running command: npm --prefix "$RESOURCE_DIR" run lint
[info] ✔  functions: Finished running predeploy script. 
[info] i  storage: ensuring required API firebasestorage.googleapis.com is enabled... 
[debug] [2025-07-02T04:40:34.672Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:34.672Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:34.672Z] >>> [apiv2][query] GET https://firebasestorage.googleapis.com/v1alpha/projects/music-sync-99dbb/defaultBucket [none]
[debug] [2025-07-02T04:40:35.134Z] <<< [apiv2][status] GET https://firebasestorage.googleapis.com/v1alpha/projects/music-sync-99dbb/defaultBucket 200
[debug] [2025-07-02T04:40:35.135Z] <<< [apiv2][body] GET https://firebasestorage.googleapis.com/v1alpha/projects/music-sync-99dbb/defaultBucket {"name":"projects/music-sync-99dbb/defaultBucket","location":"US-CENTRAL1","bucket":{"name":"projects/music-sync-99dbb/buckets/music-sync-99dbb.firebasestorage.app"},"storageClass":"REGIONAL"}
[info] i  firebase.storage: checking storage.rules for compilation errors... 
[debug] [2025-07-02T04:40:35.137Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:35.137Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:35.137Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test [none]
[debug] [2025-07-02T04:40:35.138Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test [omitted]
[debug] [2025-07-02T04:40:36.085Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test 200
[debug] [2025-07-02T04:40:36.085Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test {}
[info] ✔  firebase.storage: rules file storage.rules compiled successfully 
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-07-02T04:40:36.088Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:36.088Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:36.088Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test [none]
[debug] [2025-07-02T04:40:36.088Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test [omitted]
[debug] [2025-07-02T04:40:36.396Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test 200
[debug] [2025-07-02T04:40:36.396Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb:test {}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2025-07-02T04:40:36.398Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:36.398Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:36.399Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb [none]
[debug] [2025-07-02T04:40:36.613Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb 200
[debug] [2025-07-02T04:40:36.614Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb {"projectNumber":"833104619713","projectId":"music-sync-99dbb","lifecycleState":"ACTIVE","name":"Music-Sync","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2025-07-01T21:37:38.369804Z"}
[info] i  functions: preparing codebase default for deployment 
[info] i  functions: ensuring required API cloudfunctions.googleapis.com is enabled... 
[info] i  functions: ensuring required API cloudbuild.googleapis.com is enabled... 
[info] i  artifactregistry: ensuring required API artifactregistry.googleapis.com is enabled... 
[debug] [2025-07-02T04:40:36.616Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:36.616Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:36.616Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/music-sync-99dbb/adminSdkConfig [none]
[debug] [2025-07-02T04:40:37.158Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/music-sync-99dbb/adminSdkConfig 200
[debug] [2025-07-02T04:40:37.158Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/music-sync-99dbb/adminSdkConfig {"projectId":"music-sync-99dbb","storageBucket":"music-sync-99dbb.firebasestorage.app"}
[debug] [2025-07-02T04:40:37.159Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:37.159Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:37.159Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/music-sync-99dbb/configs [none]
[debug] [2025-07-02T04:40:37.726Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/music-sync-99dbb/configs 200
[debug] [2025-07-02T04:40:37.726Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/music-sync-99dbb/configs {}
[debug] [2025-07-02T04:40:37.729Z] Validating nodejs source
[debug] [2025-07-02T04:40:38.173Z] > [functions] package.json contents: {
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "22"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^12.6.0",
    "firebase-functions": "^6.0.1",
    "dropbox": "^10.34.0"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}
[debug] [2025-07-02T04:40:38.173Z] Building nodejs source
[info] i  functions: Loading and analyzing source code for codebase default to determine what to deploy 
[debug] [2025-07-02T04:40:38.173Z] Could not find functions.yaml. Must use http discovery
[debug] [2025-07-02T04:40:38.178Z] Found firebase-functions binary at '/Users/itamar/Documents/GitHub/music-sync/functions/node_modules/.bin/firebase-functions'
[info] Serving at port 8976

[debug] [2025-07-02T04:40:38.415Z] Got response from /__/functions.yaml {"endpoints":{"syncDropboxFolder":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"syncDropboxFolder"},"getDropboxStreamLink":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"getDropboxStreamLink"},"validateDropboxToken":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"validateDropboxToken"},"listDropboxFolders":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"listDropboxFolders"},"getTrackDuration":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"getTrackDuration"},"cleanupExpiredSyncs":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"scheduleTrigger":{"schedule":"0 2 * * *","retryConfig":{},"timeZone":"UTC"},"entryPoint":"cleanupExpiredSyncs"},"dropboxWebhook":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":10,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"httpsTrigger":{},"entryPoint":"dropboxWebhook"}},"specVersion":"v1alpha1","requiredAPIs":[{"api":"cloudscheduler.googleapis.com","reason":"Needed for scheduled functions."}],"extensions":{}}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2025-07-02T04:40:42.437Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-07-02T04:40:42.438Z] > authorizing via signed-in user (itamar92@gmail.com)
[debug] [2025-07-02T04:40:42.438Z] [iam] checking project music-sync-99dbb for permissions ["firebase.projects.get","firebaseextensions.instances.list"]
[debug] [2025-07-02T04:40:42.438Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:42.438Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:42.438Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions [none]
[debug] [2025-07-02T04:40:42.438Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions x-goog-quota-user=projects/music-sync-99dbb
[debug] [2025-07-02T04:40:42.438Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2025-07-02T04:40:43.367Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions 200
[debug] [2025-07-02T04:40:43.367Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2025-07-02T04:40:43.368Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:43.368Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:43.369Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/music-sync-99dbb/instances pageSize=100&pageToken=
[debug] [2025-07-02T04:40:44.634Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/music-sync-99dbb/instances 200
[debug] [2025-07-02T04:40:44.634Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/music-sync-99dbb/instances {}
[info] i  functions: preparing functions directory for uploading... 
[info] i  functions: packaged /Users/itamar/Documents/GitHub/music-sync/functions (81.52 KB) for uploading 
[debug] [2025-07-02T04:40:44.656Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:44.656Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:44.656Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v1/projects/music-sync-99dbb/locations/-/functions [none]
[debug] [2025-07-02T04:40:45.354Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v1/projects/music-sync-99dbb/locations/-/functions 200
[debug] [2025-07-02T04:40:45.355Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v1/projects/music-sync-99dbb/locations/-/functions {}
[debug] [2025-07-02T04:40:45.355Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:45.355Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:45.355Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/music-sync-99dbb/locations/-/functions filter=environment%3D%22GEN_2%22
[debug] [2025-07-02T04:40:46.397Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/music-sync-99dbb/locations/-/functions 200
[debug] [2025-07-02T04:40:46.397Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/music-sync-99dbb/locations/-/functions {"functions":[{"name":"projects/music-sync-99dbb/locations/us-central1/functions/syncDropboxFolder","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"syncDropboxFolder","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"syncDropboxFolder/function-source.zip","generation":"1751413949390386"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"syncDropboxFolder/function-source.zip","generation":"1751413949390386"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/syncdropboxfolder","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/syncDropboxFolder","FUNCTION_TARGET":"syncDropboxFolder","LOG_EXECUTION_ID":"true"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://syncdropboxfolder-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"syncdropboxfolder-00001-pup","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:24.596707730Z","labels":{"deployment-callable":"true","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/syncDropboxFolder","createTime":"2025-07-01T23:52:29.630935530Z","satisfiesPzi":true},{"name":"projects/music-sync-99dbb/locations/us-central1/functions/getDropboxStreamLink","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"getDropboxStreamLink","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"getDropboxStreamLink/function-source.zip","generation":"1751414024713118"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"getDropboxStreamLink/function-source.zip","generation":"1751414024713118"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/getdropboxstreamlink","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/getDropboxStreamLink","FUNCTION_TARGET":"getDropboxStreamLink","LOG_EXECUTION_ID":"true","FUNCTION_SIGNATURE_TYPE":"http"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://getdropboxstreamlink-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"getdropboxstreamlink-00001-lex","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:27.359846441Z","labels":{"deployment-callable":"true","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/getDropboxStreamLink","createTime":"2025-07-01T23:53:44.913617949Z","satisfiesPzi":true},{"name":"projects/music-sync-99dbb/locations/us-central1/functions/getTrackDuration","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"getTrackDuration","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"getTrackDuration/function-source.zip","generation":"1751414024736465"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"getTrackDuration/function-source.zip","generation":"1751414024736465"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/gettrackduration","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/getTrackDuration","FUNCTION_TARGET":"getTrackDuration","LOG_EXECUTION_ID":"true","FUNCTION_SIGNATURE_TYPE":"http"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://gettrackduration-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"gettrackduration-00001-nez","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:23.911731121Z","labels":{"deployment-callable":"true","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/getTrackDuration","createTime":"2025-07-01T23:53:44.927412445Z","satisfiesPzi":true},{"name":"projects/music-sync-99dbb/locations/us-central1/functions/listDropboxFolders","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"listDropboxFolders","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"listDropboxFolders/function-source.zip","generation":"1751414024749952"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"listDropboxFolders/function-source.zip","generation":"1751414024749952"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/listdropboxfolders","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/listDropboxFolders","FUNCTION_TARGET":"listDropboxFolders","LOG_EXECUTION_ID":"true","FUNCTION_SIGNATURE_TYPE":"http"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://listdropboxfolders-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"listdropboxfolders-00001-guz","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:33.102131270Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/listDropboxFolders","createTime":"2025-07-01T23:53:44.953509297Z","satisfiesPzi":true},{"name":"projects/music-sync-99dbb/locations/us-central1/functions/dropboxWebhook","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"dropboxWebhook","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"dropboxWebhook/function-source.zip","generation":"1751414024755192"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"dropboxWebhook/function-source.zip","generation":"1751414024755192"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/dropboxwebhook","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/dropboxWebhook","FUNCTION_TARGET":"dropboxWebhook","LOG_EXECUTION_ID":"true","FUNCTION_SIGNATURE_TYPE":"http"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://dropboxwebhook-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"dropboxwebhook-00001-qaj","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:37.068132961Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/dropboxWebhook","createTime":"2025-07-01T23:53:44.995100672Z","satisfiesPzi":true},{"name":"projects/music-sync-99dbb/locations/us-central1/functions/validateDropboxToken","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"validateDropboxToken","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"validateDropboxToken/function-source.zip","generation":"1751414024730532"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"validateDropboxToken/function-source.zip","generation":"1751414024730532"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/validatedropboxtoken","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/validateDropboxToken","FUNCTION_TARGET":"validateDropboxToken","LOG_EXECUTION_ID":"true","FUNCTION_SIGNATURE_TYPE":"http"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://validatedropboxtoken-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"validatedropboxtoken-00001-qad","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:35.948602944Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/validateDropboxToken","createTime":"2025-07-01T23:53:44.968368391Z","satisfiesPzi":true},{"name":"projects/music-sync-99dbb/locations/us-central1/functions/cleanupExpiredSyncs","buildConfig":{"build":"projects/833104619713/locations/us-central1/builds/e481a855-51eb-42f4-a80a-a22fe6cea92e","runtime":"nodejs22","entryPoint":"cleanupExpiredSyncs","source":{"storageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"cleanupExpiredSyncs/function-source.zip","generation":"1751414024747076"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-833104619713-us-central1","object":"cleanupExpiredSyncs/function-source.zip","generation":"1751414024747076"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/music-sync-99dbb/serviceAccounts/833104619713-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/music-sync-99dbb/locations/us-central1/services/cleanupexpiredsyncs","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"music-sync-99dbb\",\"storageBucket\":\"music-sync-99dbb.firebasestorage.app\"}","GCLOUD_PROJECT":"music-sync-99dbb","EVENTARC_CLOUD_EVENT_SOURCE":"projects/music-sync-99dbb/locations/us-central1/services/cleanupExpiredSyncs","FUNCTION_TARGET":"cleanupExpiredSyncs","LOG_EXECUTION_ID":"true","FUNCTION_SIGNATURE_TYPE":"http"},"maxInstanceCount":10,"ingressSettings":"ALLOW_ALL","uri":"https://cleanupexpiredsyncs-4oudeccelq-uc.a.run.app","serviceAccountEmail":"833104619713-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"cleanupexpiredsyncs-00001-kup","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-07-01T23:54:32.559242860Z","labels":{"deployment-tool":"cli-firebase","deployment-scheduled":"true","firebase-functions-hash":"2d238566d771bfd9c459a24b90d95c50fddb2360"},"environment":"GEN_2","url":"https://us-central1-music-sync-99dbb.cloudfunctions.net/cleanupExpiredSyncs","createTime":"2025-07-01T23:53:44.959363317Z","satisfiesPzi":true}]}
[info] i  functions: ensuring required API cloudscheduler.googleapis.com is enabled... 
[info] i  functions: ensuring required API run.googleapis.com is enabled... 
[info] i  functions: ensuring required API eventarc.googleapis.com is enabled... 
[info] i  functions: ensuring required API pubsub.googleapis.com is enabled... 
[info] i  functions: ensuring required API storage.googleapis.com is enabled... 
[info] i  functions: generating the service identity for pubsub.googleapis.com... 
[debug] [2025-07-02T04:40:46.400Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:46.400Z] Checked if tokens are valid: true, expires at: 1751434831266
[info] i  functions: generating the service identity for eventarc.googleapis.com... 
[debug] [2025-07-02T04:40:46.400Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:46.400Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:46.400Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/pubsub.googleapis.com:generateServiceIdentity [none]
[debug] [2025-07-02T04:40:46.400Z] >>> [apiv2][(partial)header] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/pubsub.googleapis.com:generateServiceIdentity x-goog-quota-user=projects/833104619713
[debug] [2025-07-02T04:40:46.400Z] >>> [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/pubsub.googleapis.com:generateServiceIdentity {}
[debug] [2025-07-02T04:40:46.400Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/eventarc.googleapis.com:generateServiceIdentity [none]
[debug] [2025-07-02T04:40:46.400Z] >>> [apiv2][(partial)header] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/eventarc.googleapis.com:generateServiceIdentity x-goog-quota-user=projects/833104619713
[debug] [2025-07-02T04:40:46.400Z] >>> [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/eventarc.googleapis.com:generateServiceIdentity {}
[debug] [2025-07-02T04:40:47.670Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/eventarc.googleapis.com:generateServiceIdentity 200
[debug] [2025-07-02T04:40:47.671Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/eventarc.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-833104619713@gcp-sa-eventarc.iam.gserviceaccount.com","uniqueId":"109205651878106049109"}}
[debug] [2025-07-02T04:40:47.676Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/pubsub.googleapis.com:generateServiceIdentity 200
[debug] [2025-07-02T04:40:47.676Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/833104619713/services/pubsub.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-833104619713@gcp-sa-pubsub.iam.gserviceaccount.com","uniqueId":"116121171060675737344"}}
[debug] [2025-07-02T04:40:47.679Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:47.679Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:47.679Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb [none]
[debug] [2025-07-02T04:40:47.911Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb 200
[debug] [2025-07-02T04:40:47.911Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/music-sync-99dbb {"projectNumber":"833104619713","projectId":"music-sync-99dbb","lifecycleState":"ACTIVE","name":"Music-Sync","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2025-07-01T21:37:38.369804Z"}
[debug] [2025-07-02T04:40:47.911Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:47.911Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:47.911Z] >>> [apiv2][query] GET https://compute.googleapis.com/compute/v1/projects/833104619713 [none]
[debug] [2025-07-02T04:40:48.344Z] <<< [apiv2][status] GET https://compute.googleapis.com/compute/v1/projects/833104619713 200
[debug] [2025-07-02T04:40:48.344Z] <<< [apiv2][body] GET https://compute.googleapis.com/compute/v1/projects/833104619713 {"kind":"compute#project","id":"1096445685618304180","creationTimestamp":"2025-07-01T14:59:55.892-07:00","name":"music-sync-99dbb","commonInstanceMetadata":{"kind":"compute#metadata","fingerprint":"G-gj67LGd3M="},"quotas":[{"metric":"SNAPSHOTS","limit":1000,"usage":0},{"metric":"NETWORKS","limit":5,"usage":1},{"metric":"FIREWALLS","limit":100,"usage":4},{"metric":"IMAGES","limit":100,"usage":0},{"metric":"STATIC_ADDRESSES","limit":8,"usage":0},{"metric":"ROUTES","limit":200,"usage":0},{"metric":"FORWARDING_RULES","limit":15,"usage":0},{"metric":"TARGET_POOLS","limit":50,"usage":0},{"metric":"HEALTH_CHECKS","limit":75,"usage":0},{"metric":"IN_USE_ADDRESSES","limit":8,"usage":0},{"metric":"TARGET_INSTANCES","limit":50,"usage":0},{"metric":"TARGET_HTTP_PROXIES","limit":10,"usage":0},{"metric":"URL_MAPS","limit":10,"usage":0},{"metric":"BACKEND_SERVICES","limit":50,"usage":0},{"metric":"INSTANCE_TEMPLATES","limit":100,"usage":0},{"metric":"TARGET_VPN_GATEWAYS","limit":5,"usage":0},{"metric":"VPN_TUNNELS","limit":10,"usage":0},{"metric":"BACKEND_BUCKETS","limit":3,"usage":0},{"metric":"ROUTERS","limit":10,"usage":0},{"metric":"TARGET_SSL_PROXIES","limit":10,"usage":0},{"metric":"TARGET_HTTPS_PROXIES","limit":10,"usage":0},{"metric":"SSL_CERTIFICATES","limit":10,"usage":0},{"metric":"SUBNETWORKS","limit":100,"usage":0},{"metric":"TARGET_TCP_PROXIES","limit":10,"usage":0},{"metric":"CPUS_ALL_REGIONS","limit":24,"usage":0},{"metric":"SECURITY_POLICIES","limit":10,"usage":0},{"metric":"SECURITY_POLICY_RULES","limit":100,"usage":0},{"metric":"XPN_SERVICE_PROJECTS","limit":1000,"usage":0},{"metric":"PACKET_MIRRORINGS","limit":20,"usage":0},{"metric":"NETWORK_ENDPOINT_GROUPS","limit":100,"usage":0},{"metric":"INTERCONNECTS","limit":6,"usage":0},{"metric":"SSL_POLICIES","limit":10,"usage":0},{"metric":"GLOBAL_INTERNAL_ADDRESSES","limit":5000,"usage":0},{"metric":"VPN_GATEWAYS","limit":5,"usage":0},{"metric":"MACHINE_IMAGES","limit":100,"usage":0},{"metric":"SECURITY_POLICY_CEVAL_RULES","limit":20,"usage":0},{"metric":"GPUS_ALL_REGIONS","limit":0,"usage":0},{"metric":"EXTERNAL_VPN_GATEWAYS","limit":5,"usage":0},{"metric":"PUBLIC_ADVERTISED_PREFIXES","limit":1,"usage":0},{"metric":"PUBLIC_DELEGATED_PREFIXES","limit":10,"usage":0},{"metric":"STATIC_BYOIP_ADDRESSES","limit":128,"usage":0},{"metric":"NETWORK_FIREWALL_POLICIES","limit":10,"usage":0},{"metric":"INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES","limit":15,"usage":0},{"metric":"GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES","limit":15,"usage":0},{"metric":"GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES","limit":50,"usage":0},{"metric":"GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES","limit":50,"usage":0},{"metric":"GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES","limit":50,"usage":0},{"metric":"GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES","limit":250,"usage":0}],"selfLink":"https://www.googleapis.com/compute/v1/projects/music-sync-99dbb","defaultServiceAccount":"833104619713-compute@developer.gserviceaccount.com","xpnProjectStatus":"UNSPECIFIED_XPN_PROJECT_STATUS","defaultNetworkTier":"PREMIUM","vmDnsSetting":"ZONAL_ONLY","cloudArmorTier":"CA_STANDARD"}
[debug] [2025-07-02T04:40:48.346Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:48.346Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:48.346Z] >>> [apiv2][query] GET https://cloudbilling.googleapis.com/v1/projects/music-sync-99dbb/billingInfo [none]
[debug] [2025-07-02T04:40:49.272Z] <<< [apiv2][status] GET https://cloudbilling.googleapis.com/v1/projects/music-sync-99dbb/billingInfo 200
[debug] [2025-07-02T04:40:49.272Z] <<< [apiv2][body] GET https://cloudbilling.googleapis.com/v1/projects/music-sync-99dbb/billingInfo {"name":"projects/music-sync-99dbb/billingInfo","projectId":"music-sync-99dbb","billingAccountName":"billingAccounts/010002-7EEC91-0C43F4","billingEnabled":true}
[info] i  dataconnect: ensuring required API firebasedataconnect.googleapis.com is enabled... 
[info] i  dataconnect: ensuring required API sqladmin.googleapis.com is enabled... 
[info] i  dataconnect: ensuring required API compute.googleapis.com is enabled... 
[debug] [2025-07-02T04:40:49.274Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:49.274Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:49.274Z] >>> [apiv2][query] GET https://mobilesdk-pa.googleapis.com/v1/accessmanagement/tos:getStatus [none]
[debug] [2025-07-02T04:40:49.733Z] <<< [apiv2][status] GET https://mobilesdk-pa.googleapis.com/v1/accessmanagement/tos:getStatus 200
[debug] [2025-07-02T04:40:49.733Z] <<< [apiv2][body] GET https://mobilesdk-pa.googleapis.com/v1/accessmanagement/tos:getStatus {"overallStatus":"ACCEPTED","uTosStatus":{"tos":{"id":"firebase","tosId":"FIREBASE_UNIVERSAL"},"status":"ACCEPTED","acceptedVersion":7},"childTosStatus":[{"tos":{"id":"cloud","tosId":"CLOUD_PLATFORM"},"status":"ACCEPTED","acceptedVersion":38},{"tos":{"id":"firebase_b2b","tosId":"FIREBASE_B2B"},"status":"ACCEPTED","acceptedVersion":1},{"tos":{"id":"universal","tosId":"GOOGLE_APIS"},"status":"ACCEPTED","acceptedVersion":6}],"termsUrl":"https://firebase.google.com/terms","perServiceStatus":[{"tosId":"APP_CHECK","serviceStatus":{"tos":{"id":"app_check","tosId":"APP_CHECK"},"status":"ACCEPTED","acceptedVersion":3}},{"tosId":"APP_HOSTING_TOS","serviceStatus":{"tos":{"id":"app_hosting","tosId":"APP_HOSTING_TOS"},"status":"ACCEPTED","acceptedVersion":3}},{"tosId":"FIREBASE_DATA_CONNECT","serviceStatus":{"tos":{"id":"data_connect","tosId":"FIREBASE_DATA_CONNECT"},"status":"ACCEPTED","acceptedVersion":3}},{"tosId":"CORE_APPS","serviceStatus":{"tos":{"id":"core_apps","tosId":"CORE_APPS"},"status":"ACCEPTED","acceptedVersion":1}},{"tosId":"VERTEX_AI_IN_FIREBASE","serviceStatus":{"tos":{"id":"vertex_ai_in_firebase","tosId":"VERTEX_AI_IN_FIREBASE"},"status":"ACCEPTED","acceptedVersion":2}},{"tosId":"FIREBASE_CRASHLYTICS_APP_DISTRIBUTION","serviceStatus":{"tos":{"id":"firebase_crashlytics_app_distribution","tosId":"FIREBASE_CRASHLYTICS_APP_DISTRIBUTION"},"status":"ACCEPTED","acceptedVersion":4}},{"tosId":"GENERATIVE_LANGUAGE","serviceStatus":{"tos":{"id":"generative-language-api","tosId":"GENERATIVE_LANGUAGE"},"status":"ACCEPTED","acceptedVersion":3}}]}
[info] i  dataconnect: Preparing to deploy 
[debug] [2025-07-02T04:40:49.743Z] defaultcredentials: writing to file /Users/itamar/.config/firebase/itamar92_gmail_com_application_default_credentials.json
[debug] [2025-07-02T04:40:51.338Z] I0702 07:40:51.296071   57979 control.go:84] [/emulator/music-sync c772] UpdateResources(): done
Schema: sources: schema/schema.gql [2703B] 
Connector "default": sources: connector/mutations.gql [3254B] connector/queries.gql [3435B] 
 {"metadata":{"emulator":{"name":"dataconnect"},"message":"I0702 07:40:51.296071   57979 control.go:84] [/emulator/music-sync c772] UpdateResources(): done\nSchema: sources: schema/schema.gql [2703B] \nConnector \"default\": sources: connector/mutations.gql [3254B] connector/queries.gql [3435B] \n"}}
[warn] ⚠  dataconnect: There are existing insecure operations or changes in your schema or connectors that may cause unexpected behavior in your existing applications:
┌────────────────────┬──────────────────────────────────────────────────┬──────────────────────────────────────────────────┬──────────────────────────────────────────────────┐
│ Type               │ Issue                                            │ Workaround                                       │ Reason                                           │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/mutations.gql:73: On                   │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ mutation.DeletePlaylist: existing operation      │                                                  │ the user ID are considered insecure because any  │
│                    │ DeletePlaylist accessible to any user found      │                                                  │ logged-in user can access it. If this operation  │
│                    │                                                  │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/mutations.gql:123: On                  │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ mutation.DeleteTrack: existing operation         │                                                  │ the user ID are considered insecure because any  │
│                    │ DeleteTrack accessible to any user found         │                                                  │ logged-in user can access it. If this operation  │
│                    │                                                  │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/queries.gql:67: On query.GetPlaylist:  │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ existing operation GetPlaylist accessible to any │                                                  │ the user ID are considered insecure because any  │
│                    │ user found                                       │                                                  │ logged-in user can access it. If this operation  │
│                    │                                                  │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/mutations.gql:38: On                   │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ mutation.UnsyncFolder: existing operation        │                                                  │ the user ID are considered insecure because any  │
│                    │ UnsyncFolder accessible to any user found        │                                                  │ logged-in user can access it. If this operation  │
│                    │                                                  │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/mutations.gql:30: On                   │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ mutation.UpdateFolderDisplayName: existing       │                                                  │ the user ID are considered insecure because any  │
│                    │ operation UpdateFolderDisplayName accessible to  │                                                  │ logged-in user can access it. If this operation  │
│                    │ any user found                                   │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/mutations.gql:65: On                   │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ mutation.UpdatePlaylistDisplayName: existing     │                                                  │ the user ID are considered insecure because any  │
│                    │ operation UpdatePlaylistDisplayName accessible   │                                                  │ logged-in user can access it. If this operation  │
│                    │ to any user found                                │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
├────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┼──────────────────────────────────────────────────┤
│ EXISTING_INSECURE  │ connector/mutations.gql:108: On                  │ Add an insecure reason to the operation.         │ User-accessible operations that don't reference  │
│                    │ mutation.UpdateTrackAlias: existing operation    │                                                  │ the user ID are considered insecure because any  │
│                    │ UpdateTrackAlias accessible to any user found    │                                                  │ logged-in user can access it. If this operation  │
│                    │                                                  │                                                  │ is safe to expose to any user, add an insecure   │
│                    │                                                  │                                                  │ reason to the @auth directive to suppress this   │
│                    │                                                  │                                                  │ warning.                                         │
└────────────────────┴──────────────────────────────────────────────────┴──────────────────────────────────────────────────┴──────────────────────────────────────────────────┘ 
[info] i  dataconnect: Successfully prepared schema and connectors 
[debug] [2025-07-02T04:40:51.353Z] {
  "serviceInfos": [
    {
      "serviceName": "projects/music-sync-99dbb/locations/europe-central2/services/music-sync",
      "sourceDirectory": "/Users/itamar/Documents/GitHub/music-sync/dataconnect",
      "schema": {
        "name": "projects/music-sync-99dbb/locations/europe-central2/services/music-sync/schemas/main",
        "datasources": [
          {
            "postgresql": {
              "database": "fdcdb",
              "cloudSql": {
                "instance": "projects/music-sync-99dbb/locations/europe-central2/instances/music-sync-fdc"
              }
            }
          }
        ],
        "source": {
          "files": [
            {
              "path": "schema.gql",
              "content": "# Music Sync App Schema\r\n\r\n# User table is keyed by Firebase Auth UID\r\ntype User @table {\r\n  # Firebase Auth UID is automatically set during insert and upsert\r\n  id: String! @default(expr: \"auth.uid\")\r\n  email: String! @col(dataType: \"varchar(255)\")\r\n  dropboxUserId: String @col(dataType: \"varchar(100)\")\r\n  createdAt: Timestamp! @default(expr: \"request.time\")\r\n  updatedAt: Timestamp! @default(expr: \"request.time\")\r\n}\r\n\r\n# Folder sync configuration - tracks which Dropbox folders are synced\r\ntype FolderSync @table {\r\n  id: UUID! @default(expr: \"uuidV4()\")\r\n  user: User!\r\n  folderId: String! @col(dataType: \"varchar(255)\")\r\n  folderPath: String! @col(dataType: \"text\")\r\n  folderName: String! @col(dataType: \"varchar(255)\")\r\n  displayName: String @col(dataType: \"varchar(255)\")\r\n  isActive: Boolean! @default(expr: \"true\")\r\n  lastSyncAt: Timestamp @default(expr: \"request.time\")\r\n  createdAt: Timestamp! @default(expr: \"request.time\")\r\n  updatedAt: Timestamp! @default(expr: \"request.time\")\r\n}\r\n\r\n# Playlists - can be folder-based or custom\r\ntype Playlist @table {\r\n  id: UUID! @default(expr: \"uuidV4()\")\r\n  user: User!\r\n  name: String! @col(dataType: \"varchar(255)\")\r\n  displayName: String @col(dataType: \"varchar(255)\")\r\n  folderId: String @col(dataType: \"varchar(255)\")\r\n  folderPath: String @col(dataType: \"text\")\r\n  type: String! @col(dataType: \"varchar(20)\") # 'folder' or 'custom'\r\n  isActive: Boolean! @default(expr: \"true\")\r\n  createdAt: Timestamp! @default(expr: \"request.time\")\r\n  updatedAt: Timestamp! @default(expr: \"request.time\")\r\n}\r\n\r\n# Individual tracks/songs\r\ntype Track @table {\r\n  id: UUID! @default(expr: \"uuidV4()\")\r\n  user: User!\r\n  name: String! @col(dataType: \"varchar(255)\")\r\n  displayName: String @col(dataType: \"varchar(255)\")\r\n  artist: String! @col(dataType: \"varchar(255)\")\r\n  displayArtist: String @col(dataType: \"varchar(255)\")\r\n  duration: String! @col(dataType: \"varchar(20)\")\r\n  durationSeconds: Int!\r\n  filePath: String! @col(dataType: \"text\")\r\n  folderId: String @col(dataType: \"varchar(255)\")\r\n  playlist: Playlist\r\n  isActive: Boolean! @default(expr: \"true\")\r\n  createdAt: Timestamp! @default(expr: \"request.time\")\r\n  updatedAt: Timestamp! @default(expr: \"request.time\")\r\n}\r\n\r\n# Sync status tracking for individual tracks\r\ntype TrackSync @table {\r\n  id: UUID! @default(expr: \"uuidV4()\")\r\n  track: Track! @unique\r\n  user: User!\r\n  lastSyncedAt: Timestamp @default(expr: \"request.time\")\r\n  syncStatus: String! @col(dataType: \"varchar(20)\") @default(expr: \"'pending'\") # 'pending', 'synced', 'error'\r\n  errorMessage: String @col(dataType: \"text\")\r\n  createdAt: Timestamp! @default(expr: \"request.time\")\r\n  updatedAt: Timestamp! @default(expr: \"request.time\")\r\n}\r\n"
            }
          ]
        }
      },
      "dataConnectYaml": {
        "specVersion": "v1",
        "serviceId": "music-sync",
        "location": "europe-central2",
        "schema": {
          "source": "./schema",
          "datasource": {
            "postgresql": {
              "database": "fdcdb",
              "cloudSql": {
                "instanceId": "music-sync-fdc"
              }
            }
          }
        },
        "connectorDirs": [
          "./connector"
        ]
      },
      "connectorInfo": [
        {
          "directory": "/Users/itamar/Documents/GitHub/music-sync/dataconnect/connector",
          "connectorYaml": {
            "connectorId": "default",
            "generate": {
              "javascriptSdk": {
                "outputDir": "../../dataconnect-generated/js/default-connector",
                "package": "@firebasegen/default-connector",
                "packageJsonDir": "../..",
                "react": true
              }
            }
          },
          "connector": {
            "name": "projects/music-sync-99dbb/locations/europe-central2/services/music-sync/connectors/default",
            "source": {
              "files": [
                {
                  "path": "mutations.gql",
                  "content": "# Mutations for Music Sync App\r\n\r\n# Create or update user profile\r\nmutation UpsertUser($email: String!, $dropboxUserId: String) @auth(level: USER) {\r\n  user_upsert(data: { \r\n    id_expr: \"auth.uid\", \r\n    email: $email, \r\n    dropboxUserId: $dropboxUserId \r\n  })\r\n}\r\n\r\n# Add a folder to sync for current user\r\nmutation SyncFolder(\r\n  $folderId: String!, \r\n  $folderPath: String!, \r\n  $folderName: String!, \r\n  $displayName: String\r\n) @auth(level: USER) {\r\n  folderSync_insert(data: {\r\n    userId_expr: \"auth.uid\"\r\n    folderId: $folderId\r\n    folderPath: $folderPath\r\n    folderName: $folderName\r\n    displayName: $displayName\r\n    isActive: true\r\n  })\r\n}\r\n\r\n# Update folder display name (requires folder ID)\r\nmutation UpdateFolderDisplayName($id: UUID!, $displayName: String!) @auth(level: USER) {\r\n  folderSync_update(\r\n    id: $id\r\n    data: { displayName: $displayName }\r\n  )\r\n}\r\n\r\n# Remove a folder from sync (requires folder ID)\r\nmutation UnsyncFolder($id: UUID!) @auth(level: USER) {\r\n  folderSync_update(\r\n    id: $id\r\n    data: { isActive: false }\r\n  )\r\n}\r\n\r\n# Create a playlist for current user\r\nmutation CreatePlaylist(\r\n  $name: String!, \r\n  $displayName: String, \r\n  $folderId: String, \r\n  $folderPath: String, \r\n  $type: String!\r\n) @auth(level: USER) {\r\n  playlist_insert(data: {\r\n    userId_expr: \"auth.uid\"\r\n    name: $name\r\n    displayName: $displayName\r\n    folderId: $folderId\r\n    folderPath: $folderPath\r\n    type: $type\r\n    isActive: true\r\n  })\r\n}\r\n\r\n# Update playlist display name\r\nmutation UpdatePlaylistDisplayName($playlistId: UUID!, $displayName: String!) @auth(level: USER) {\r\n  playlist_update(\r\n    id: $playlistId\r\n    data: { displayName: $displayName }\r\n  )\r\n}\r\n\r\n# Delete a playlist\r\nmutation DeletePlaylist($playlistId: UUID!) @auth(level: USER) {\r\n  playlist_update(\r\n    id: $playlistId\r\n    data: { isActive: false }\r\n  )\r\n}\r\n\r\n# Add a track for current user\r\nmutation CreateTrack(\r\n  $name: String!,\r\n  $displayName: String,\r\n  $artist: String!,\r\n  $displayArtist: String,\r\n  $duration: String!,\r\n  $durationSeconds: Int!,\r\n  $filePath: String!,\r\n  $folderId: String,\r\n  $playlistId: UUID\r\n) @auth(level: USER) {\r\n  track_insert(data: {\r\n    userId_expr: \"auth.uid\"\r\n    name: $name\r\n    displayName: $displayName\r\n    artist: $artist\r\n    displayArtist: $displayArtist\r\n    duration: $duration\r\n    durationSeconds: $durationSeconds\r\n    filePath: $filePath\r\n    folderId: $folderId\r\n    playlistId: $playlistId\r\n    isActive: true\r\n  })\r\n}\r\n\r\n# Update track display names\r\nmutation UpdateTrackAlias(\r\n  $trackId: UUID!, \r\n  $displayName: String, \r\n  $displayArtist: String\r\n) @auth(level: USER) {\r\n  track_update(\r\n    id: $trackId\r\n    data: { \r\n      displayName: $displayName,\r\n      displayArtist: $displayArtist\r\n    }\r\n  )\r\n}\r\n\r\n# Delete a track\r\nmutation DeleteTrack($trackId: UUID!) @auth(level: USER) {\r\n  track_update(\r\n    id: $trackId\r\n    data: { isActive: false }\r\n  )\r\n}\r\n\r\n# Update track sync status for current user\r\nmutation UpdateTrackSyncStatus(\r\n  $trackId: UUID!, \r\n  $syncStatus: String!, \r\n  $errorMessage: String\r\n) @auth(level: USER) {\r\n  trackSync_insert(data: {\r\n    trackId: $trackId\r\n    userId_expr: \"auth.uid\"\r\n    syncStatus: $syncStatus\r\n    errorMessage: $errorMessage\r\n  })\r\n}"
                },
                {
                  "path": "queries.gql",
                  "content": "# Queries for Music Sync App\r\n\r\n# Get current user profile\r\nquery GetUser @auth(level: USER) {\r\n  user(key: { id_expr: \"auth.uid\" }) {\r\n    id\r\n    email\r\n    dropboxUserId\r\n    createdAt\r\n    updatedAt\r\n  }\r\n}\r\n\r\n# List all synced folders for current user\r\nquery ListSyncedFolders @auth(level: USER) {\r\n  folderSyncs(where: { \r\n    user: { id: { eq_expr: \"auth.uid\" } }, \r\n    isActive: { eq: true } \r\n  }) {\r\n    id\r\n    folderId\r\n    folderPath\r\n    folderName\r\n    displayName\r\n    lastSyncAt\r\n    createdAt\r\n    updatedAt\r\n  }\r\n}\r\n\r\n# Get specific folder sync by folder ID for current user\r\nquery GetFolderSync($folderId: String!) @auth(level: USER) {\r\n  folderSyncs(where: { \r\n    user: { id: { eq_expr: \"auth.uid\" } }, \r\n    folderId: { eq: $folderId },\r\n    isActive: { eq: true }\r\n  }) {\r\n    id\r\n    folderId\r\n    folderPath\r\n    folderName\r\n    displayName\r\n    lastSyncAt\r\n    createdAt\r\n    updatedAt\r\n  }\r\n}\r\n\r\n# List all playlists for current user\r\nquery ListPlaylists @auth(level: USER) {\r\n  playlists(where: { \r\n    user: { id: { eq_expr: \"auth.uid\" } }, \r\n    isActive: { eq: true } \r\n  }) {\r\n    id\r\n    name\r\n    displayName\r\n    folderId\r\n    folderPath\r\n    type\r\n    createdAt\r\n    updatedAt\r\n  }\r\n}\r\n\r\n# Get specific playlist by ID (only if user owns it)\r\nquery GetPlaylist($playlistId: UUID!) @auth(level: USER) {\r\n  playlist(id: $playlistId) {\r\n    id\r\n    name\r\n    displayName\r\n    folderId\r\n    folderPath\r\n    type\r\n    createdAt\r\n    updatedAt\r\n    user {\r\n      id\r\n    }\r\n  }\r\n}\r\n\r\n# List tracks for a specific playlist (only if user owns it)\r\nquery GetPlaylistTracks($playlistId: UUID!) @auth(level: USER) {\r\n  tracks(where: { \r\n    playlist: { id: { eq: $playlistId } },\r\n    user: { id: { eq_expr: \"auth.uid\" } },\r\n    isActive: { eq: true }\r\n  }) {\r\n    id\r\n    name\r\n    displayName\r\n    artist\r\n    displayArtist\r\n    duration\r\n    durationSeconds\r\n    filePath\r\n    folderId\r\n    createdAt\r\n    updatedAt\r\n  }\r\n}\r\n\r\n# Search tracks by name or artist for current user\r\nquery SearchTracks($query: String!) @auth(level: USER) {\r\n  tracks(where: { \r\n    _and: [\r\n      { user: { id: { eq_expr: \"auth.uid\" } } },\r\n      { isActive: { eq: true } },\r\n      {\r\n        _or: [\r\n          { name: { contains: $query } },\r\n          { displayName: { contains: $query } },\r\n          { artist: { contains: $query } },\r\n          { displayArtist: { contains: $query } }\r\n        ]\r\n      }\r\n    ]\r\n  }) {\r\n    id\r\n    name\r\n    displayName\r\n    artist\r\n    displayArtist\r\n    duration\r\n    durationSeconds\r\n    filePath\r\n    folderId\r\n    playlist {\r\n      id\r\n      name\r\n      displayName\r\n    }\r\n  }\r\n}\r\n\r\n# Get tracks by folder ID for current user\r\nquery GetTracksByFolder($folderId: String!) @auth(level: USER) {\r\n  tracks(where: { \r\n    user: { id: { eq_expr: \"auth.uid\" } },\r\n    folderId: { eq: $folderId },\r\n    isActive: { eq: true }\r\n  }) {\r\n    id\r\n    name\r\n    displayName\r\n    artist\r\n    displayArtist\r\n    duration\r\n    durationSeconds\r\n    filePath\r\n    folderId\r\n    playlist {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n\r\n# Get sync status for tracks owned by current user\r\nquery GetTrackSyncStatus($trackIds: [UUID!]!) @auth(level: USER) {\r\n  trackSyncs(where: { \r\n    track: { id: { in: $trackIds } },\r\n    user: { id: { eq_expr: \"auth.uid\" } }\r\n  }) {\r\n    id\r\n    track {\r\n      id\r\n      name\r\n      artist\r\n    }\r\n    lastSyncedAt\r\n    syncStatus\r\n    errorMessage\r\n    updatedAt\r\n  }\r\n}"
                }
              ]
            }
          }
        }
      ],
      "deploymentMetadata": {
        "primaryDataSource": {
          "postgres": {
            "requiredExtensions": [
              "uuid-ossp"
            ]
          }
        }
      }
    }
  ]
}
[debug] [2025-07-02T04:40:51.354Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:51.354Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:51.354Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases pageSize=10&pageToken=
[debug] [2025-07-02T04:40:52.216Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases 200
[debug] [2025-07-02T04:40:52.216Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases {"releases":[{"name":"projects/music-sync-99dbb/releases/cloud.firestore","rulesetName":"projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b","createTime":"2025-07-01T23:52:27.241499Z","updateTime":"2025-07-01T23:52:27.241499Z"},{"name":"projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app","rulesetName":"projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6","createTime":"2025-07-01T23:15:46.564254Z","updateTime":"2025-07-01T23:52:25.600444Z"}]}
[debug] [2025-07-02T04:40:52.217Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:52.217Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:52.217Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6 [none]
[debug] [2025-07-02T04:40:52.907Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6 200
[debug] [2025-07-02T04:40:52.907Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6 [omitted]
[info] i  storage: latest version of storage.rules already up to date, skipping upload... 
[debug] [2025-07-02T04:40:52.908Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:52.908Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:52.908Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/music-sync-99dbb/databases/(default) [none]
[debug] [2025-07-02T04:40:54.001Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/music-sync-99dbb/databases/(default) 200
[debug] [2025-07-02T04:40:54.001Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/music-sync-99dbb/databases/(default) {"name":"projects/music-sync-99dbb/databases/(default)","uid":"ebb0b208-3eb7-464d-9423-ac3efff8cc3b","createTime":"2025-07-01T23:52:05.498435Z","updateTime":"2025-07-01T23:52:05.498435Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-07-02T03:40:54.038545Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"etag":"IPWs++2tnY4DMNiY/ajtnI4D"}
[debug] [2025-07-02T04:40:54.002Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:54.002Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:54.002Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases pageSize=10&pageToken=
[debug] [2025-07-02T04:40:54.691Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases 200
[debug] [2025-07-02T04:40:54.691Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases {"releases":[{"name":"projects/music-sync-99dbb/releases/cloud.firestore","rulesetName":"projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b","createTime":"2025-07-01T23:52:27.241499Z","updateTime":"2025-07-01T23:52:27.241499Z"},{"name":"projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app","rulesetName":"projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6","createTime":"2025-07-01T23:15:46.564254Z","updateTime":"2025-07-01T23:52:25.600444Z"}]}
[debug] [2025-07-02T04:40:54.692Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:54.692Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:54.692Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b [none]
[debug] [2025-07-02T04:40:54.994Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b 200
[debug] [2025-07-02T04:40:54.994Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b [omitted]
[info] i  firestore: latest version of firestore.rules already up to date, skipping upload... 
[debug] [2025-07-02T04:40:54.995Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:54.995Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:54.995Z] >>> [apiv2][query] GET https://cloudbilling.googleapis.com/v1/projects/music-sync-99dbb/billingInfo [none]
[debug] [2025-07-02T04:40:55.476Z] <<< [apiv2][status] GET https://cloudbilling.googleapis.com/v1/projects/music-sync-99dbb/billingInfo 200
[debug] [2025-07-02T04:40:55.477Z] <<< [apiv2][body] GET https://cloudbilling.googleapis.com/v1/projects/music-sync-99dbb/billingInfo {"name":"projects/music-sync-99dbb/billingInfo","projectId":"music-sync-99dbb","billingAccountName":"billingAccounts/010002-7EEC91-0C43F4","billingEnabled":true}
[debug] [2025-07-02T04:40:55.478Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:55.479Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:55.479Z] >>> [apiv2][query] GET https://firebasedataconnect.googleapis.com/v1/projects/music-sync-99dbb/locations/-/services [none]
[debug] [2025-07-02T04:40:56.797Z] <<< [apiv2][status] GET https://firebasedataconnect.googleapis.com/v1/projects/music-sync-99dbb/locations/-/services 200
[debug] [2025-07-02T04:40:56.797Z] <<< [apiv2][body] GET https://firebasedataconnect.googleapis.com/v1/projects/music-sync-99dbb/locations/-/services {"services":[{"name":"projects/music-sync-99dbb/locations/europe-central2/services/music-sync","createTime":"2025-07-01T23:52:18.028142723Z","updateTime":"2025-07-01T23:52:19.221693368Z","uid":"5855cc61-8049-4082-97ac-940cedea52fd","reconciling":false,"etag":"opSmytUAYejXm-xPCf9ba7ETO4tXe85dT5QUiMCxuAk"}]}
[info] i  dataconnect: Checking for CloudSQL resources... 
[debug] [2025-07-02T04:40:56.797Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:56.797Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:56.797Z] >>> [apiv2][query] GET https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc [none]
[debug] [2025-07-02T04:40:57.205Z] <<< [apiv2][status] GET https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc 200
[debug] [2025-07-02T04:40:57.205Z] <<< [apiv2][body] GET https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc {"kind":"sql#instance","state":"RUNNABLE","databaseVersion":"POSTGRES_15","settings":{"authorizedGaeApplications":[],"tier":"db-f1-micro","kind":"sql#settings","userLabels":{"firebase-data-connect":"ft"},"availabilityType":"ZONAL","pricingPlan":"PER_USE","replicationType":"SYNCHRONOUS","activationPolicy":"ALWAYS","ipConfiguration":{"authorizedNetworks":[],"sslMode":"ALLOW_UNENCRYPTED_AND_ENCRYPTED","ipv4Enabled":true,"requireSsl":false,"serverCaMode":"GOOGLE_MANAGED_INTERNAL_CA"},"locationPreference":{"zone":"europe-central2-b","kind":"sql#locationPreference"},"databaseFlags":[{"name":"cloudsql.iam_authentication","value":"on"}],"dataDiskType":"PD_SSD","backupConfiguration":{"startTime":"23:00","kind":"sql#backupConfiguration","backupRetentionSettings":{"retentionUnit":"COUNT","retainedBackups":7},"enabled":false,"transactionLogRetentionDays":7,"transactionalLogStorageState":"TRANSACTIONAL_LOG_STORAGE_STATE_UNSPECIFIED","backupTier":"STANDARD"},"insightsConfig":{"queryInsightsEnabled":true,"queryStringLength":1024,"queryPlansPerMinute":5},"edition":"ENTERPRISE","connectorEnforcement":"NOT_REQUIRED","settingsVersion":"3","storageAutoResizeLimit":"0","storageAutoResize":false,"dataDiskSizeGb":"10","deletionProtectionEnabled":false,"replicationLagMaxSeconds":31536000,"enableGoogleMlIntegration":false},"etag":"9801ebb03591dc28b84d9cc1f2eadef90dc175526a39310cea7923e8f4c95498","ipAddresses":[{"type":"PRIMARY","ipAddress":"34.116.246.173"},{"type":"OUTGOING","ipAddress":"34.118.114.42"}],"serverCaCert":{"kind":"sql#sslCert","certSerialNumber":"0","cert":"-----BEGIN CERTIFICATE-----\nMIIDfzCCAmegAwIBAgIBADANBgkqhkiG9w0BAQsFADB3MS0wKwYDVQQuEyRmZTdh\nY2U4Mi1kMzYyLTQ5N2EtOGMyYi03ZDZkZGM1NTVlZWMxIzAhBgNVBAMTGkdvb2ds\nZSBDbG91ZCBTUUwgU2VydmVyIENBMRQwEgYDVQQKEwtHb29nbGUsIEluYzELMAkG\nA1UEBhMCVVMwHhcNMjUwNzAxMjIwNTUzWhcNMzUwNjI5MjIwNjUzWjB3MS0wKwYD\nVQQuEyRmZTdhY2U4Mi1kMzYyLTQ5N2EtOGMyYi03ZDZkZGM1NTVlZWMxIzAhBgNV\nBAMTGkdvb2dsZSBDbG91ZCBTUUwgU2VydmVyIENBMRQwEgYDVQQKEwtHb29nbGUs\nIEluYzELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQDaQIFqOxweQSlSEePm4qyvW+ZydTAmDoO04JxTAbLTaFa1i22uxPJrvpg47g40\nWKSRrMoJ8sxTno1zBlF0PYt3LgaJ3e6Bs7i1LtRAOs1Oj4E62NU70ag2ZV3EGiQi\n5Logq0VtdvSnK91FtYDCAHHainJkDJE1uqg1CXZGKQIyL6bopKvlrzTbHAwm9NgI\nfhUxR9B08grqRl7jB1OnjbW7nOTBlxY8iUZ5a5SOtST3tlOwPwA/SXEQ8DG8zl60\n2seO6g8MjrWHqubEEqkzX/YSHLJ1BdfWQVa+lFyP+sE4fQvnoh82KRUzUU5b0Uhq\n2VWBSishjW8H7XmWaPSD6/UNAgMBAAGjFjAUMBIGA1UdEwEB/wQIMAYBAf8CAQAw\nDQYJKoZIhvcNAQELBQADggEBAELSFwYUe7O+V+sPmW6pWDht/iEQ8/CJVx3EyKYo\nr4pjwopONd/0UPGBQ/91226yfO/bZpU8kmBjXgBMcP+9FWPUeiVyxpw71SpAtBYn\nCo6JgYIOmG2kDwQVSliHCu0XV5YnrbGVrVCsAgrJRogiEeITkk8qvlp/ji98B29m\n1Qgk3miR6rHqxrUwmuTeOUHZbzcHt5b8pGhktSu150Thf8pJ6enq3EdLKdSkWTHQ\n4zndYyqEqFPKZ3cF3eP2Z7tlw3xtL2ZhbJyCv+s3BZDFy7u9/lB+brhkNqs2Xh+n\niPMf0dw9sEagj3eCGD8sxxKiF1DeSJcXJNDXx5fmd0eCgxA=\n-----END CERTIFICATE-----","commonName":"C=US,O=Google\\, Inc,CN=Google Cloud SQL Server CA,dnQualifier=fe7ace82-d362-497a-8c2b-7d6ddc555eec","sha1Fingerprint":"eae8bbe001add10ad496ea03e2dd5256eb031ee5","instance":"music-sync-fdc","createTime":"2025-07-01T22:05:53.978Z","expirationTime":"2035-06-29T22:06:53.978Z"},"instanceType":"CLOUD_SQL_INSTANCE","project":"music-sync-99dbb","serviceAccountEmailAddress":"p833104619713-nav17q@gcp-sa-cloud-sql.iam.gserviceaccount.com","backendType":"SECOND_GEN","selfLink":"https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc","connectionName":"music-sync-99dbb:europe-central2:music-sync-fdc","name":"music-sync-fdc","region":"europe-central2","gceZone":"europe-central2-b","databaseInstalledVersion":"POSTGRES_15_13","maintenanceVersion":"POSTGRES_15_13.R20250302.00_31","createTime":"2025-07-01T22:05:04.877Z","sqlNetworkArchitecture":"NEW_NETWORK_ARCHITECTURE","satisfiesPzi":true,"includeReplicasForMajorVersionUpgrade":false}
[info] i  dataconnect: Found existing instance music-sync-fdc. 
[debug] [2025-07-02T04:40:57.206Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:57.206Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:57.206Z] >>> [apiv2][query] GET https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc/databases/fdcdb [none]
[debug] [2025-07-02T04:40:57.738Z] <<< [apiv2][status] GET https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc/databases/fdcdb 200
[debug] [2025-07-02T04:40:57.738Z] <<< [apiv2][body] GET https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc/databases/fdcdb {"kind":"sql#database","charset":"UTF8","collation":"en_US.UTF8","etag":"0da8d5bca852e50a1e72432379da8fd1b3675a7a120d154344e688dff65ee55b","name":"fdcdb","instance":"music-sync-fdc","selfLink":"https://sqladmin.googleapis.com/v1/projects/music-sync-99dbb/instances/music-sync-fdc/databases/fdcdb","project":"music-sync-99dbb"}
[info] i  dataconnect: Found existing database fdcdb. 
[debug] [2025-07-02T04:40:57.739Z] [rules] releasing firebase.storage/music-sync-99dbb.firebasestorage.app with ruleset projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6
[debug] [2025-07-02T04:40:57.739Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:57.739Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:57.739Z] >>> [apiv2][query] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app [none]
[debug] [2025-07-02T04:40:57.739Z] >>> [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app {"release":{"name":"projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app","rulesetName":"projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6"}}
[debug] [2025-07-02T04:40:58.223Z] <<< [apiv2][status] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app 200
[debug] [2025-07-02T04:40:58.224Z] <<< [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app {"name":"projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app","rulesetName":"projects/music-sync-99dbb/rulesets/9a2ac6bc-6c95-4d05-ad40-cde29fbbb7e6","createTime":"2025-07-01T23:15:46.564254Z","updateTime":"2025-07-02T04:40:58.234452Z"}
[debug] [2025-07-02T04:40:58.224Z] [rules] updated release projects/music-sync-99dbb/releases/firebase.storage/music-sync-99dbb.firebasestorage.app
[info] ✔  storage: released rules storage.rules to firebase.storage 
[debug] [2025-07-02T04:40:58.225Z] [rules] releasing cloud.firestore/(default) with ruleset projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b
[debug] [2025-07-02T04:40:58.225Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:58.225Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:58.225Z] >>> [apiv2][query] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/cloud.firestore/(default) [none]
[debug] [2025-07-02T04:40:58.225Z] >>> [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/cloud.firestore/(default) {"release":{"name":"projects/music-sync-99dbb/releases/cloud.firestore/(default)","rulesetName":"projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b"}}
[debug] [2025-07-02T04:40:58.690Z] <<< [apiv2][status] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/cloud.firestore/(default) 200
[debug] [2025-07-02T04:40:58.690Z] <<< [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/music-sync-99dbb/releases/cloud.firestore/(default) {"name":"projects/music-sync-99dbb/releases/cloud.firestore","rulesetName":"projects/music-sync-99dbb/rulesets/3b133367-1ae1-412f-a4f8-a8aae579116b","createTime":"2025-07-01T23:52:27.241499Z","updateTime":"2025-07-02T04:40:58.702444Z"}
[debug] [2025-07-02T04:40:58.690Z] [rules] updated release projects/music-sync-99dbb/releases/cloud.firestore
[info] ✔  firestore: released rules firestore.rules to cloud.firestore 
[info] i  functions: Skipping the deploy of unchanged functions. 
[info] ✔  functions[syncDropboxFolder(us-central1)] Skipped (No changes detected) 
[info] ✔  functions[getDropboxStreamLink(us-central1)] Skipped (No changes detected) 
[info] ✔  functions[validateDropboxToken(us-central1)] Skipped (No changes detected) 
[info] ✔  functions[listDropboxFolders(us-central1)] Skipped (No changes detected) 
[info] ✔  functions[getTrackDuration(us-central1)] Skipped (No changes detected) 
[info] ✔  functions[cleanupExpiredSyncs(us-central1)] Skipped (No changes detected) 
[info] ✔  functions[dropboxWebhook(us-central1)] Skipped (No changes detected) 
[debug] [2025-07-02T04:40:58.695Z] Total Function Deployment time: 0
[debug] [2025-07-02T04:40:58.695Z] 0 Functions Deployed
[debug] [2025-07-02T04:40:58.695Z] 0 Functions Errored
[debug] [2025-07-02T04:40:58.695Z] 0 Function Deployments Aborted
[debug] [2025-07-02T04:40:58.695Z] Average Function Deployment time: NaN
[debug] [2025-07-02T04:40:58.839Z] Not printing URL for HTTPS function. Typically this means it didn't match a filter or we failed deployment
[debug] [2025-07-02T04:40:58.839Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:58.839Z] Checked if tokens are valid: true, expires at: 1751434831266
[debug] [2025-07-02T04:40:58.839Z] >>> [apiv2][query] GET https://artifactregistry.googleapis.com/v1/projects/music-sync-99dbb/locations/us-central1/repositories/gcf-artifacts [none]

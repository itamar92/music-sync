# Mutations for Music Sync App

# Create or update user profile
mutation UpsertUser($email: String!, $dropboxUserId: String, $role: String) @auth(level: USER) {
  user_upsert(data: { 
    id_expr: "auth.uid", 
    email: $email, 
    dropboxUserId: $dropboxUserId,
    role: $role
  })
}

# ADMIN MUTATIONS (admin only)

# Create a collection (admin only)
mutation CreateCollection(
  $name: String!, 
  $displayName: String!, 
  $description: String,
  $coverImageUrl: String,
  $isPublic: Boolean,
  $sortOrder: Int
) @auth(level: USER) {
  collection_insert(data: {
    name: $name
    displayName: $displayName
    description: $description
    coverImageUrl: $coverImageUrl
    isPublic: $isPublic
    sortOrder: $sortOrder
    createdById_expr: "auth.uid"
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Update collection (admin only)
mutation UpdateCollection(
  $collectionId: UUID!,
  $name: String, 
  $displayName: String, 
  $description: String,
  $coverImageUrl: String,
  $isPublic: Boolean,
  $sortOrder: Int
) @auth(level: USER) {
  collection_update(
    id: $collectionId
    data: { 
      name: $name
      displayName: $displayName
      description: $description
      coverImageUrl: $coverImageUrl
      isPublic: $isPublic
      sortOrder: $sortOrder
    }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Add a folder to sync (admin only)
mutation SyncFolder(
  $folderId: String!, 
  $folderPath: String!, 
  $folderName: String!, 
  $displayName: String,
  $collectionId: UUID!
) @auth(level: USER) {
  folderSync_insert(data: {
    folderId: $folderId
    folderPath: $folderPath
    folderName: $folderName
    displayName: $displayName
    collectionId: $collectionId
    isActive: true
    createdById_expr: "auth.uid"
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Update folder sync (admin only)
mutation UpdateFolderSync(
  $id: UUID!, 
  $displayName: String,
  $collectionId: UUID,
  $isActive: Boolean
) @auth(level: USER) {
  folderSync_update(
    id: $id
    data: { 
      displayName: $displayName
      collectionId: $collectionId
      isActive: $isActive
    }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Remove a folder from sync (admin only)
mutation UnsyncFolder($id: UUID!) @auth(level: USER) {
  folderSync_update(
    id: $id
    data: { isActive: false }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Create a playlist (admin only)
mutation CreatePlaylist(
  $name: String!, 
  $displayName: String!, 
  $description: String,
  $coverImageUrl: String,
  $folderId: String, 
  $folderPath: String, 
  $collectionId: UUID!,
  $type: String!,
  $isPublic: Boolean,
  $sortOrder: Int
) @auth(level: USER) {
  playlist_insert(data: {
    name: $name
    displayName: $displayName
    description: $description
    coverImageUrl: $coverImageUrl
    folderId: $folderId
    folderPath: $folderPath
    collectionId: $collectionId
    type: $type
    isPublic: $isPublic
    sortOrder: $sortOrder
    totalTracks: 0
    createdById_expr: "auth.uid"
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Update playlist (admin only)
mutation UpdatePlaylist(
  $playlistId: UUID!, 
  $name: String,
  $displayName: String,
  $description: String,
  $coverImageUrl: String,
  $collectionId: UUID,
  $isPublic: Boolean,
  $sortOrder: Int,
  $totalTracks: Int,
  $totalDuration: String
) @auth(level: USER) {
  playlist_update(
    id: $playlistId
    data: { 
      name: $name
      displayName: $displayName
      description: $description
      coverImageUrl: $coverImageUrl
      collectionId: $collectionId
      isPublic: $isPublic
      sortOrder: $sortOrder
      totalTracks: $totalTracks
      totalDuration: $totalDuration
    }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Delete a playlist (admin only)
mutation DeletePlaylist($playlistId: UUID!) @auth(level: USER) {
  playlist_update(
    id: $playlistId
    data: { isActive: false }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Add a track (admin only)
mutation CreateTrack(
  $name: String!,
  $displayName: String,
  $artist: String!,
  $displayArtist: String,
  $duration: String!,
  $durationSeconds: Int!,
  $filePath: String!,
  $folderId: String,
  $playlistId: UUID!,
  $trackNumber: Int
) @auth(level: USER) {
  track_insert(data: {
    name: $name
    displayName: $displayName
    artist: $artist
    displayArtist: $displayArtist
    duration: $duration
    durationSeconds: $durationSeconds
    filePath: $filePath
    folderId: $folderId
    playlistId: $playlistId
    trackNumber: $trackNumber
    isActive: true
    createdById_expr: "auth.uid"
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Update track (admin only)
mutation UpdateTrack(
  $trackId: UUID!, 
  $name: String,
  $displayName: String, 
  $artist: String,
  $displayArtist: String,
  $duration: String,
  $durationSeconds: Int,
  $trackNumber: Int,
  $isActive: Boolean
) @auth(level: USER) {
  track_update(
    id: $trackId
    data: { 
      name: $name
      displayName: $displayName
      artist: $artist
      displayArtist: $displayArtist
      duration: $duration
      durationSeconds: $durationSeconds
      trackNumber: $trackNumber
      isActive: $isActive
    }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Delete a track (admin only)
mutation DeleteTrack($trackId: UUID!) @auth(level: USER) {
  track_update(
    id: $trackId
    data: { isActive: false }
  ) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}

# Update track sync status (admin only)
mutation UpdateTrackSyncStatus(
  $trackId: UUID!, 
  $syncStatus: String!, 
  $errorMessage: String
) @auth(level: USER) {
  trackSync_insert(data: {
    trackId: $trackId
    syncStatus: $syncStatus
    errorMessage: $errorMessage
    createdById_expr: "auth.uid"
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')")
}
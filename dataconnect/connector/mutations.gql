# Mutations for Music Sync App

# Create or update user profile
mutation UpsertUser($email: String!, $dropboxUserId: String) @auth(level: USER) {
  user_upsert(data: { 
    id_expr: "auth.uid", 
    email: $email, 
    dropboxUserId: $dropboxUserId 
  })
}

# Add a folder to sync for current user
mutation SyncFolder(
  $folderId: String!, 
  $folderPath: String!, 
  $folderName: String!, 
  $displayName: String
) @auth(level: USER) {
  folderSync_insert(data: {
    userId_expr: "auth.uid"
    folderId: $folderId
    folderPath: $folderPath
    folderName: $folderName
    displayName: $displayName
    isActive: true
  })
}

# Update folder display name (requires folder ID)
mutation UpdateFolderDisplayName($id: UUID!, $displayName: String!) @auth(level: USER) {
  folderSync_update(
    id: $id
    data: { displayName: $displayName }
  )
}

# Remove a folder from sync (requires folder ID)
mutation UnsyncFolder($id: UUID!) @auth(level: USER) {
  folderSync_update(
    id: $id
    data: { isActive: false }
  )
}

# Create a playlist for current user
mutation CreatePlaylist(
  $name: String!, 
  $displayName: String, 
  $folderId: String, 
  $folderPath: String, 
  $type: String!
) @auth(level: USER) {
  playlist_insert(data: {
    userId_expr: "auth.uid"
    name: $name
    displayName: $displayName
    folderId: $folderId
    folderPath: $folderPath
    type: $type
    isActive: true
  })
}

# Update playlist display name
mutation UpdatePlaylistDisplayName($playlistId: UUID!, $displayName: String!) @auth(level: USER) {
  playlist_update(
    id: $playlistId
    data: { displayName: $displayName }
  )
}

# Delete a playlist
mutation DeletePlaylist($playlistId: UUID!) @auth(level: USER) {
  playlist_update(
    id: $playlistId
    data: { isActive: false }
  )
}

# Add a track for current user
mutation CreateTrack(
  $name: String!,
  $displayName: String,
  $artist: String!,
  $displayArtist: String,
  $duration: String!,
  $durationSeconds: Int!,
  $filePath: String!,
  $folderId: String,
  $playlistId: UUID
) @auth(level: USER) {
  track_insert(data: {
    userId_expr: "auth.uid"
    name: $name
    displayName: $displayName
    artist: $artist
    displayArtist: $displayArtist
    duration: $duration
    durationSeconds: $durationSeconds
    filePath: $filePath
    folderId: $folderId
    playlistId: $playlistId
    isActive: true
  })
}

# Update track display names
mutation UpdateTrackAlias(
  $trackId: UUID!, 
  $displayName: String, 
  $displayArtist: String
) @auth(level: USER) {
  track_update(
    id: $trackId
    data: { 
      displayName: $displayName,
      displayArtist: $displayArtist
    }
  )
}

# Delete a track
mutation DeleteTrack($trackId: UUID!) @auth(level: USER) {
  track_update(
    id: $trackId
    data: { isActive: false }
  )
}

# Update track sync status for current user
mutation UpdateTrackSyncStatus(
  $trackId: UUID!, 
  $syncStatus: String!, 
  $errorMessage: String
) @auth(level: USER) {
  trackSync_insert(data: {
    trackId: $trackId
    userId_expr: "auth.uid"
    syncStatus: $syncStatus
    errorMessage: $errorMessage
  })
}
# Queries for Music Sync App

# Get current user profile
query GetUser @auth(level: USER) {
  user(key: { id_expr: "auth.uid" }) {
    id
    email
    dropboxUserId
    role
    isActive
    createdAt
    updatedAt
  }
}

# PUBLIC QUERIES (no auth required)

# List all public collections
query ListPublicCollections {
  collections(where: { 
    isPublic: { eq: true } 
  }, orderBy: { sortOrder: ASC }) {
    id
    name
    displayName
    description
    coverImageUrl
    sortOrder
    createdAt
    updatedAt
  }
}

# Get public collection with its playlists
query GetPublicCollection($collectionId: UUID!) {
  collection(id: $collectionId) {
    id
    name
    displayName
    description
    coverImageUrl
    isPublic
    createdAt
    updatedAt
  }
}

# List public playlists for a collection
query ListPublicPlaylists($collectionId: UUID!) {
  playlists(where: { 
    collection: { id: { eq: $collectionId } },
    isPublic: { eq: true }
  }, orderBy: { sortOrder: ASC }) {
    id
    name
    displayName
    description
    coverImageUrl
    totalTracks
    totalDuration
    sortOrder
    createdAt
    updatedAt
  }
}

# Get public playlist with tracks
query GetPublicPlaylist($playlistId: UUID!) {
  playlist(id: $playlistId) {
    id
    name
    displayName
    description
    coverImageUrl
    totalTracks
    totalDuration
    isPublic
    collection {
      id
      name
      displayName
    }
    createdAt
    updatedAt
  }
}

# Get tracks for a public playlist
query GetPublicPlaylistTracks($playlistId: UUID!) {
  tracks(where: { 
    playlist: { id: { eq: $playlistId } },
    isActive: { eq: true }
  }, orderBy: { trackNumber: ASC }) {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    trackNumber
    filePath
  }
}

# ADMIN QUERIES (admin auth required)

# List all collections (admin only)
query ListAllCollections @auth(level: USER) {
  collections(orderBy: { sortOrder: ASC }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    name
    displayName
    description
    coverImageUrl
    isPublic
    sortOrder
    createdBy {
      email
    }
    createdAt
    updatedAt
  }
}

# List all synced folders (admin only)
query ListAllSyncedFolders @auth(level: USER) {
  folderSyncs(where: { 
    isActive: { eq: true } 
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    folderId
    folderPath
    folderName
    displayName
    collection {
      id
      name
      displayName
    }
    lastSyncAt
    createdBy {
      email
    }
    createdAt
    updatedAt
  }
}

# Get specific folder sync by folder ID (admin only)
query GetFolderSync($folderId: String!) @auth(level: USER) {
  folderSyncs(where: { 
    folderId: { eq: $folderId },
    isActive: { eq: true }
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    folderId
    folderPath
    folderName
    displayName
    collection {
      id
      name
      displayName
    }
    lastSyncAt
    createdBy {
      email
    }
    createdAt
    updatedAt
  }
}

# List all playlists (admin only)
query ListAllPlaylists @auth(level: USER) {
  playlists(orderBy: { collection: { sortOrder: ASC }, sortOrder: ASC }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    name
    displayName
    description
    coverImageUrl
    folderId
    folderPath
    collection {
      id
      name
      displayName
    }
    type
    isPublic
    sortOrder
    totalTracks
    totalDuration
    createdBy {
      email
    }
    createdAt
    updatedAt
  }
}

# Get specific playlist by ID (admin only)
query GetPlaylist($playlistId: UUID!) @auth(level: USER) {
  playlist(id: $playlistId) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    name
    displayName
    description
    coverImageUrl
    folderId
    folderPath
    collection {
      id
      name
      displayName
    }
    type
    isPublic
    sortOrder
    totalTracks
    totalDuration
    createdBy {
      email
    }
    createdAt
    updatedAt
  }
}

# List tracks for a specific playlist (admin only)
query GetPlaylistTracks($playlistId: UUID!) @auth(level: USER) {
  tracks(where: { 
    playlist: { id: { eq: $playlistId } },
    isActive: { eq: true }
  }, orderBy: { trackNumber: ASC }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    filePath
    folderId
    trackNumber
    createdBy {
      email
    }
    createdAt
    updatedAt
  }
}

# Search tracks by name or artist (admin only)
query SearchTracks($query: String!) @auth(level: USER) {
  tracks(where: { 
    _and: [
      { isActive: { eq: true } },
      {
        _or: [
          { name: { contains: $query } },
          { displayName: { contains: $query } },
          { artist: { contains: $query } },
          { displayArtist: { contains: $query } }
        ]
      }
    ]
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    filePath
    folderId
    trackNumber
    playlist {
      id
      name
      displayName
      collection {
        id
        name
        displayName
      }
    }
  }
}

# Get tracks by folder ID (admin only)
query GetTracksByFolder($folderId: String!) @auth(level: USER) {
  tracks(where: { 
    folderId: { eq: $folderId },
    isActive: { eq: true }
  }, orderBy: { trackNumber: ASC }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    filePath
    folderId
    trackNumber
    playlist {
      id
      name
      displayName
    }
  }
}

# Get sync status for tracks (admin only)
query GetTrackSyncStatus($trackIds: [UUID!]!) @auth(level: USER) {
  trackSyncs(where: { 
    track: { id: { in: $trackIds } }
  }) @where(expr: "auth.uid in (select id from User where role = 'admin')") {
    id
    track {
      id
      name
      artist
    }
    lastSyncedAt
    syncStatus
    errorMessage
    createdBy {
      email
    }
    updatedAt
  }
}
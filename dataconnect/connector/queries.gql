# Queries for Music Sync App

# Get current user profile
query GetUser @auth(level: USER) {
  user(key: { id_expr: "auth.uid" }) {
    id
    email
    dropboxUserId
    createdAt
    updatedAt
  }
}

# List all synced folders for current user
query ListSyncedFolders @auth(level: USER) {
  folderSyncs(where: { 
    user: { id: { eq_expr: "auth.uid" } }, 
    isActive: { eq: true } 
  }) {
    id
    folderId
    folderPath
    folderName
    displayName
    lastSyncAt
    createdAt
    updatedAt
  }
}

# Get specific folder sync by folder ID for current user
query GetFolderSync($folderId: String!) @auth(level: USER) {
  folderSyncs(where: { 
    user: { id: { eq_expr: "auth.uid" } }, 
    folderId: { eq: $folderId },
    isActive: { eq: true }
  }) {
    id
    folderId
    folderPath
    folderName
    displayName
    lastSyncAt
    createdAt
    updatedAt
  }
}

# List all playlists for current user
query ListPlaylists @auth(level: USER) {
  playlists(where: { 
    user: { id: { eq_expr: "auth.uid" } }, 
    isActive: { eq: true } 
  }) {
    id
    name
    displayName
    folderId
    folderPath
    type
    createdAt
    updatedAt
  }
}

# Get specific playlist by ID (only if user owns it)
query GetPlaylist($playlistId: UUID!) @auth(level: USER) {
  playlist(id: $playlistId) {
    id
    name
    displayName
    folderId
    folderPath
    type
    createdAt
    updatedAt
    user {
      id
    }
  }
}

# List tracks for a specific playlist (only if user owns it)
query GetPlaylistTracks($playlistId: UUID!) @auth(level: USER) {
  tracks(where: { 
    playlist: { id: { eq: $playlistId } },
    user: { id: { eq_expr: "auth.uid" } },
    isActive: { eq: true }
  }) {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    filePath
    folderId
    createdAt
    updatedAt
  }
}

# Search tracks by name or artist for current user
query SearchTracks($query: String!) @auth(level: USER) {
  tracks(where: { 
    _and: [
      { user: { id: { eq_expr: "auth.uid" } } },
      { isActive: { eq: true } },
      {
        _or: [
          { name: { contains: $query } },
          { displayName: { contains: $query } },
          { artist: { contains: $query } },
          { displayArtist: { contains: $query } }
        ]
      }
    ]
  }) {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    filePath
    folderId
    playlist {
      id
      name
      displayName
    }
  }
}

# Get tracks by folder ID for current user
query GetTracksByFolder($folderId: String!) @auth(level: USER) {
  tracks(where: { 
    user: { id: { eq_expr: "auth.uid" } },
    folderId: { eq: $folderId },
    isActive: { eq: true }
  }) {
    id
    name
    displayName
    artist
    displayArtist
    duration
    durationSeconds
    filePath
    folderId
    playlist {
      id
      name
    }
  }
}

# Get sync status for tracks owned by current user
query GetTrackSyncStatus($trackIds: [UUID!]!) @auth(level: USER) {
  trackSyncs(where: { 
    track: { id: { in: $trackIds } },
    user: { id: { eq_expr: "auth.uid" } }
  }) {
    id
    track {
      id
      name
      artist
    }
    lastSyncedAt
    syncStatus
    errorMessage
    updatedAt
  }
}